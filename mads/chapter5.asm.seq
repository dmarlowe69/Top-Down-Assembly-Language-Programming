;********************************************;SCREEN UTILITIES;;APPENDIX Cl: ASSEMBLER LISTING OF;SCREEN UTILITIES;SEE CHAPTER 5 OF TOP-DOWN ASSEMBLY LANGUAGE;PROGRAMMING FOR YOUR COMMODORE 64 AND VIC-20;BY KEN SKIER;COPYRIGHT (C) 1984 BY KENNETH SKIER;LEXINGTON, MASSACHUSETTS;********************************************;ASCII:  RETURN ASCII CHARACTER FOR 4 LSB IN A.;CENTER: SET CURRENT SCREEN POSITION TO CENTER OF SCREEN.;CLRTV:  CLEAR THE ENTIRE VIDEO DISPLAY, PRESERVING TVPTR.;CLRXY:  CLEAR A RECTANGLE OF THE SCREEN, WITH X,Y DIMENSIONS SPECIFIED;        BY THE X,Y REGISTERS.;TVDOWN: MOVE CURRENT SCREEN POSITION DOWN BY ONE ROW.;TVHOME: SET CURRENT SCREEN POSITION TO THE UPPER-LEFT CORNER OF THE;        SCREEN.;TVPLUS: ADD A TO TVPTR.;TVPOP:  RESTORE PREVIOUSLY SAVED SCREEN POSITION FROM STACK.;TVPUSH: SAVE CURRENT SCREEN LOCATION ON STACK.;TVPUT:  DISPLAY ASCII CHARACTER IN A AT CURRENT SCREEN LOCATION.;TVSKIP: ADVANCE TO NEXT SCREEN LOCATION.;TVTOXY: SET CURRENT SCREEN POSITION TO X,Y COORDINATES GIVEN BY X,Y;        REGISTERS.;VUBYTE: DISPLAY A, IN HEXADECIMAL FORM, AT CURRENT SCREEN LOCATION.;        ADVANCE CURRENT SCREEN LOCATION PAST THE DISPLAYED BYTE.;VUCHAR: DISPLAY A AS AN ASCII CHARACTER IN CURRENT SCREEN LOCATION;;        THEN ADVANCE TO NEXT SCREEN LOCATION.;APPENDIX CL: ASSEMBLER LISTING OF;********************************************;ZERO PAGE BYTES;********************************************;TVPTR = $FB ;THIS POINTER HOLDS THE;             ;ADDRESS OF THE CURRENT;             ;SCREEN LOCATION.;********************************************;SCREEN PARAMETERS;********************************************;PARAMS = $3000 ;THE FOLLOWING ADDRESSES;               ;MUST BE INITIALIZED TO HOLD;               ;DATA DESCRIBING THE SCREEN;               ;ON YOUR SYSTEM.;HOME = PARAMS  ;HOME IS A POINTER TO CHARACTER;               ;POSITION IN UPPER LEFT CORNER.;ROWINC = PARAMS+2 ;ROWINC IS A BYTE GIVING;                  ;ADDRESS DIFFERENCE FROM ONE;                  ;ROW TO THE NEXT.;TVCOLS = PARAMS+3 ;TVCOLS IS A BYTE GIVING;                  ;NUMBER OF COLUMNS ON SCREEN.;                  ;(COUNTING FROM ZERO.);TVROWS = PARAMS+4 ;FVROWS IS A BYTE GIVING;                  ;NUMBER OF ROWS ON SCREEN,;                  ;(COUNTING FROM ZERO.);HIPAGE = PARAMS+5 ;HIPAGE IS THE HIGH BYTE OF;                  ;THE HIGHEST ADDRESS ON SCREEN.;BLANK = PARAMS+6  ;YOUR SYSTEM'S CHARACTER;                  ;CODE FOR A BLANK.;ARROW = PARAMS+7  ;YOUR SYSTEM S CHARACTER;                  ;FOR AN UP-ARROW.;FIXCHR = PARAMS+$11 ;FIXCHR IS A SUBROUTINE THAT;                    ;RETURNS YOUR SYSTEM'S;                    ;DISPLAY CODE FOR ASCII.;                    ;CODE.;********************************************; * = $3100;********************************************;CLEAR SCREEN;;CLEAR SCREEN, PRESERVING THE ZERO PAGE.;;********************************************CLRTV  JSR TVPUSH  ;SAVE ZERO PAGE BYTES THAT                   ;WILL BE CHANGED.       JSR TVHOME  ;SET SCREEN LOCATION TO UPPER                   ;LEFT CORNER OF THE SCREEN.       LDX TVCOLS  ;LOAD X,Y REGISTERS WITH       LDY TVROWS  ;X,Y DIMENSIONS OF SCREEN.       JSR CLRXY   ;CLEAR X COLUMNS, Y ROWS                   ;FROM CURRENT SCREEN LOCATION.       JSR TVPOP   ;RESTORE ZERO PAGE BYTES THAT                   ;WERE CHANGED.       RTS         ;RETURN TO CALLER, WITH ZERO                   ;PAGE PRESERVED.;********************************************;;CLEAR PORTION OF SCREEN;;CLEAR X COLUMNS, Y ROWS;FROM CURRENT SCREEN LOCATION.;MOVES TVPTR DOWN BY Y ROWS.;;********************************************CLRXY  STX COLS      ;SET THE NUMBER OF COLUMNS                     ;TO BE CLEARED.       TYA       TAX           ;NOW X HOLDS NUMBER OF ROWS                     ;TO BE CLEARED.;CLRROW LDA BLANK     ;WE'LL CLEAR THEM BY                     ;WRITING BLANKS TO THE                     ;SCREEN.       LDY COLS      ;LOAD Y WITH NUMBER OF                     ;COLUMNS TO BE CLEARED.CLRPOS STA (TVPTR),Y ;CLEAR A POSITION BY                     ;WRITING A BLANK INTO IT.;       DEY           ;ADJUST INDEX FOR NEXT                     ;POSITION ON THE ROW.       BPL CLRPOS    ;IF NOT DONE WITH ROW,                     ;CLEAR NEXT POSITION...       JSR TVDOWN    ;IF DONE WITH ROW, MOVE                     ;CURRENT SCREEN LOCATION                     ;DOWN BY ONE ROW.;       DEX           ;DONE LAST ROW YET?       BPL CLRROW    ;IF NOT, CLEAR NEXT ROW...       RTS           ;IF SO, RETURN TO CALLER.COLS   .BYTE 0       ;DATA CELLS HOLDS NUMBER OF                     ;COLUMNS TO BE CLEARED.;********************************************;;TVHOME;;********************************************TVHOME LDX #0     ;SET TVPTR TO UPPER LEFT       LDY #0     ;CORNER OF SCREEN BY                  ;ZEROING X AND Y AND THEN       CLC        ;GOING TO X,Y COORDINATES       BCC TVTOXY ;;********************************************;;CENTER;;SET TVPTR TO SCREEN'S;CENTER;;********************************************CENTER LDA TVROWS  ;LOAD A WITH TOTAL ROWS.       LSR A       ;DIVIDE IT BY TWO.       TAY         ;Y NOW HOLDS THE NUMBER OF THE CENTRAL                   ;ROW ON THE SCREEN.       LDA TVCOLS  ;LOAD A WITH TOTAL COLUMNS.       LSR A       ;DIVIDE IT BY TWO.       TAX         ;X NOW HOLDS THE NUMBER OF THE CENTRAL                   ;COLUMN ON THE SCREEN.                   ;NOW X AND Y REGISTERS HOLD X, Y COOR-                   ;DINATES OF CENTER OF SCREEN.;********************************************;;TVTOXY;;SET CURRENT SCREEN LOCATION;TO COORDINATES GIVEN BY;THE X AND Y REGISTERS.;;********************************************TVTOXY SEC         ;       CPX TVCOLS  ;IS X OUT OF RANGE?       BCC XOK     ;IF NOT, LEAVE IT ALONE.                   ;IF X IS OUT OF RANGE, GIVE       LDX TVCOLS  ;IT ITS MAXIMUM LEGAL VALUE                   ;NOW X IS LEGAL.XOK    SEC         ;IS Y OUT OF RANGE?       CPY TVROWS  ;       BCC YOK     ;IF NOT, LEAVE IT ALONE.                   ;IF Y IS OUT OF RANGE, GIVE       LDY TVROWS  ;IT ITS MAXIMUM LEGAL VALUE                   ;NOW Y IS LEGAL.YOK    LDA HOME    ;SET TVPTR = HOME.       STA TVPTR   ;       LDA HOME+1  ;       STA TVPTR+1 ;                   ;       PHP       CLD                   ;       TXA         ;ADD X TO TVPTR.       CLC         ;       ADC TVPTR   ;       BCC COLSET  ;       INC TVPTR+1 ;       CLC         ;                   ;COLSET CPY #0      ;ADD Y*ROWINC TO TVPTR       BEQ TVSET   ;ADDROW CLC         ;       ADC ROWINC  ;       BCC *+4     ;       INC TVPTR+1 ;NEXT1  DEY         ;       BNE ADDROW  ;;TVSET  STA TVPTR   ;       PLP         ;RESTORE CALLER'S DECIMAL FLAG       RTS         ;RETURN TO CALLER.;********************************************;;TVDOWN, TVSKIP, AND TVPLUS;;********************************************TVDOWN LDA ROWINC  ;MOVE TVPTR DOWN BY ONE ROW.       CLC         ;       BCC TVPLUS  ;UNCONDITIONALLY BRANCH.;VUCHAR JSR TVPUT   ;PUT CHARACTER ON SCREEN,                   ;AND THEN                   ;TVSKIP LDA #1      ;SKIP ONE SCREEN LOCATION                   ;BY INCREMENTING TV.PTR                   ;TVPLUS PHP         ;TVPLUS ADDS ACCUMULATOR       CLD         ;TO TV.PTR, KEEPING TV.PTR       CLC         ;WITHIN SCREEN MEMORY.       ADC TVPTR   ;       BCC *+4     ;       INC TVPTR+1 ;       STA TVPTR   ;       SEC         ;IS CURRENT SCREEN LOCATION       LDA HIPAGE  ;OUTSIDE OF SCREEN MEMORY?       CMP TVPTR+1 ;       BCS TVOK    ;                   ;       LDA HOME+1  ;IF SO, WRAP AROUND FROM       STA TVPTR+1 ;BOTTOM TO TOP OF SCREEN.                   ;TVOK   PLP         ;RESTORE ORIGINAL DECIMAL       RTS         ;FLAG AND RETURN TO CALLER.;********************************************;;TVPUT;;********************************************TVPUT  JSR FIXCHR    ;CONVERT ASCII CHARACTER                     ;TO YOUR SYSTEM'S DISPLAY                     ;CODE.                     ;TVPUTX LDY #0        ;PUT CHARACTER AT CURRENT       STA (TVPTR),Y ;SCREEN LOCATION.       RTS           ;THEN RETURN.;********************************************;;VUBYTE;;********************************************VUBYTE PHA         ;SAVE BYTE TO BE DISPLAYED.       LSR A       ;MOVE 4 MOST SIGNIFICANT       LSR A       ;BITS INTO POSITIONS       LSR A       ;FORMERLY OCCUPIED BY 4       LSR A       ;LEAST SIGNIFICANT BITS.                   ;       JSR ASCII   ;DETERMINE ASCII CHAR FOR                   ;HEX DIGIT IN A'S 4 LSB.                   ;       JSR VUCHAR  ;DISPLAY THAT ASCII CHAR ON                   ;SCREEN AND ADVANCE TO NEXT                   ;SCREEN LOCATION.                   ;       PLA         ;RESTORE ORIGINAL BYTE TO A.       JSR ASCII   ;DETERMINE ASCII CHAR FOR                   ;A'S 4 LSB.                   ;       JSR VUCHAR  ;STORE THIS ASCII CHAR JUST                   ;TO THE RIGHT OF THE OTHER                   ;ASCII CHAR, AND ADVANCE TO                   ;NEXT SCREEN POSITION.       RTS         ;RETURN TO CALLER.;********************************************;;ASCII;;********************************************ASCII  PHP        ;THIS ROUTINE RETURNS ASCII       CLD        ;FOR 4 LSB IN ACCUMULATOR.       AND #$0F   ;CLEAR HIGH 4 BITS IN A.       CMP #$0A   ;IS ACCUMULATOR GREATER                  ;THAN 9?       BMI DECIML ;IF NOT, IT MUST BE 0-9.                  ;       ADC #6     ;IF SO, IT MUST BE A-F.                  ;ADD 36 HEX TO CONVERT IT.                  ;TO CORRESPONDING ASCII CHAR.DECIML ADC #$30   ;IF A IS 0-9, ADD 30 HEX                  ;TO CONVERT IT TO                  ;CORRESPONDING ASCII CHAR.                  ;       PLP        ;RESTORE ORIGINAL DECIMAL                  ;FLAG, AND       RTS        ;RETURN TO CALLER;********************************************;;TVPUSH;;SAVE CURRENT SCREEN LOCATION;ON STACK, FOR CALLER.;********************************************TVPUSH PLA         ;PULL RETURN ADDRESS FROM STACK.       TAX         ;SAVE IT IN X...       PLA       TAY         ;...AND IN Y.                   ;       LDA TVPTR+1 ;GET TVPTR       PHA         ;AND SAVE       LDA TVPTR   ;IT ON       PHA         ;THE STACK.                   ;       TYA         ;PLACE RETURN       PHA         ;ADDRESS BACK...       TXA       PHA         ;... ON STACK.                   ;       RTS         ;THEN RETURN TO CALLER.;********************************************;;TVPOP;;********************************************TVPOP  PLA         ;PULL RETURN ADDRESS FROM STACK.       TAX         ;SAVE IT IN X...       PLA         ;       TAY         ;...AND IN Y.                   ;       PLA         ;RESTORE...       STA TVPTR   ;...TVPTR       PLA         ;...FROM       STA TVPTR+1 ;...STACK.                   ;       TYA         ;PLACE RETURN       PHA         ;ADDRESS BACK...       TXA         ;       PHA         ;... ON STACK.                   ;       RTS         ;THEN RETURN TO CALLER.;********************************************;;;;********************************************.END