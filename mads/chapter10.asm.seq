;********************************************;A GENERAL MOVE UTILITY;;APPENDIX C9: ASSEMBLER LISTING OF;MOVE UTILITIES;SEE CHAPTER 10 OF TOP-DOWN ASSEMBLY LANGUAGE;PROGRAMMING FOR YOUR COMMODORE 64 AND VIC-20;BY KEN SKIER;COPYRIGHT (C) 1984 BY KENNETH SKIER;LEXINGTON, MASSACHUSETTS;;********************************************;********************************************;;MOVE TOOL STORAGE;;********************************************NUM .WORD 0  ;NUMBER OF BYTES IN BLOCK             ;TO BE MOVED. ZERO MEANS             ;BLOCK CONTAINS 1 BYTE.DEST .WORD 0 ;POINTER TO BLOCK'S             ;DESTINATION.;********************************************;;MOVE TOOL RETUNRN CODES;;********************************************ERROR = 0     ;THIS RETURN CODE MEANS              ;SA < EA, SO MOVE ABORTED.OKAY  = $FF   ;THIS RETURN CODE MEANS              ;MOVE ACCOMPLISHED.;********************************************;;MOVER;;********************************************MOVER  JSR TVTON          ;Select screen as an output device.       JSR PRINTX         ;DISPLAY A TITLE       .BYTE TEX       .BYTE CR       .BYTE ' MOVE TOOL'       .BYTE CR,LF,LF       .BYTE ETX;       JSR SETADS        ;Get start address,END                         ;ADDRESS FROM USER;       JSR SETDA         ;GET DESTINATION ADDRESS                         ;FROM USER.                         ;WITH THOSE POINTERS SET,                         ;WE'RE READY TO EXECUTE MOV.EA:;********************************************;;MOV.EA: MOVE BLOCK SPECIFIED BY SA, EA, DEST;;RETURN CODES:;;ERROR = 0      THIS RETURN CODE MEANS;                SA < EA, SO MOVE ABORTED.;OKAY  = $FF    THIS RETURN CODE MEANS;                MOVE ACCOMPLISHED.;;********************************************MOVEA  LDX EA+1    ;SET NUM EQUAL TO EA - SA:       SEC       LDA EA       SBC SA       STA NUM       BCS MOVES       DEX       SECMOVES  TXA       SBC SA+1       STA NUM+1       BCS MOVNUM;ERRTN  LDA #ERROR  ;IF EA < SA,       RTS         ;RETURN WITH ERROR CODE.;********************************************;;MOVNUM: MOVE BLOCK SPECIFIED BY SA, NUM, DEST.;;********************************************MOVNUM LDY #3        ;SAVE ZERO PAGE BYTES THATLOOPMV LDA GETPTR,Y  ;WILL BE CHANGED.;       PHA       DEY       BPL LOOPMV;       SEC           ;IF DEST>SA, BRANCH TO MOVE-UP       LDA SA+1       CMP DEST+1       BCC MOVEUP       BNE MOVEDN                     ;IF DEST<SA, BRANCH TO                     ;MOVE-DOWN.;       LDA SA       CMP DEST       BCC MOVEUP       BNE MOVEDN    ;IF DEST EQUALS SA,OKRTN  LDY #0        ;RETURN BEARING 'OKAY' CODE.                     ;RESTORE ZERO PAGE BYTESLOOPMO PLA           ;THAT WERE CHANGED.       STA GETPTR,Y       INY       CPY #4       BNE LOOPMO       LDA #OKAY     ;RETURN W/'OKAY' CODE.       RTS;********************************************;;Move-Down: MOVEDN;;********************************************MOVEDN JSR LOPAGE     ;SET PAGE POINTERS TO LOWEST                      ;PAGES IN ORIGIN, DESTINATION                      ;BLOCKS.       LDY #0         ;INITIALIZE PAGE INDEX TO                      ;BOTTOM OF PAGE.       LDX NUM+1      ;USE X TO COUNT THE NUMBER                      ;OF PAGES TO MOVE. MORE THAN                      ;ONE PAGE TO MOVE?       BEQ LESSDN     ;IF NOT, MOVE LESS THAN A                      ;PAGE.;                      ;IF SO,PAGEDN LDA (GETPTR),Y ;MOVE A PAGE DOWN,       STA (PUTPTR),Y ;STARTING AT THE BOTTOM.       INY            ;INCREMENT PAGE INDEX.       BNE PAGEDN     ;IF PAGE NOT MOVED, MOVE                      ;NEXT BYTE...;       INC GETPTR+1   ;Increment page pointers.       INC PUTPTR+1       DEX            ;DECREMENT PAGE COUNT.       BNE PAGEDN     ;IF A PAGE LEFT TO MOVE,                      ;MOVE IT AS A PAGE.;LESSDN DEY            ;       INY            ;MOVE LESS THAN A PAGE       LDA (GETPTR),Y ;DOWN, STARTING AT THE       STA (PUTPTR),Y ;BOTTOM.       CPY NUM        ;MOVED LAST BYTE?       BNE LESSDN+1   ;IF NOT, MOVE NEXT BYTE...       JMP OKRTN      ;IF SO, RETURN BEARING                      ;'OKAY' CODE.;MOVEUP LDA NUM+1      ;MORE THAN A PAGE TO MOVE?       BEQ LESSUP     ;IF NOT, MOVE LESS THAN A                      ;PAGE.                      ;                      ;TO MOVE MORE THAN A PAGE,                      ;SET PAGE POINTERS TO                      ;HIGHEST PAGES IN ORIGIN,                      ;DESTINATION BLOCKS.                      ;                      ;TO DO THIS, FIRST SET                      ;(X,Y) EQUAL TO NUM - *FF,                      ;(RELATIVE ADDRESS OF                      ;HIGHEST PAGE IN A BLOCK-)                      ;       LDY NUM+1       LDA NUM       SEC       SBC #$FF       BCS NEXTME       DEY;NEXTME TAX                      ;                      ;NOW (X,Y) - NUM - $FF.                      ;X IS LOW BYTE, Y IS HIGH BYTE                      ;       STY PUTPTR+1       TXA       CLC       ADC SA       STA GETPTR       BCC NEXTMN       INY;NEXTMN TYA       ADC SA+1       STA GETPTR+1                     ;                     ;NOW GETPTR IS SA+NUM-*FF.                     ;(LAST PAGE IN SOURCE BLOCK-)                     ;       TXA       CLC       ADC DEST       STA PUTPTR       BCC NEXTMX       INC PUTPTR+1;NEXTMX LDA PUTPTR+1       ADC DEST+1       STA PUTPTR+1                       ;                      ;NOW PUTPTR IS DEST+NUM-*FF.                      ;(LAST PAGE IN DEST BLOCK.)                      ;       LDX NUM+1      ;LOAD X WITH NUMBER OF                      ;PAGES TO MOVE.                      ;PAGEUP LDY #$FF       ;SET PAGE INDEX TO TOP OF                      ;PAGE.                      ;LOOPMR LDA (GETPTR),Y ;MOVE A PAGE UP, STARTING       STA (PUTPTR),Y ;AT THE TOP OF THE BLOCK.       DEY            ;DECREMENT PAGE INDEX.                      ;ABOUT TO MOVE LAST BYTE                      ;IN PAGE?       BNE LOOPMR     ;IF NOT, HANDLE NEXT BYTE.                      ;AS BEFORE.;       LDA (GETPTR),Y ;IF SO, MOVE THIS BYTE FROM       STA (PUTPTR),Y ;SOURCE TO DESTINATION.       DEC GETPTR+1       DEC PUTPTR+1   ;DECREMENT PAGE POINTERS.       DEX            ;DECREMENT PAGE COUNTER.       BNE PAGEUP     ;IF A PAGE LEFT TO MOVE,                      ;MOVE IT AS A PAGE....;LESSUP JSR LOPAGE     ;MOVE LESS THAN A PAGE UP,       LDY NUM        ;STARTING AT THE TOP.;MOVEIT LDA (GETPTR),Y ;COPY A BYTE FROM ORIGIN       STA (PUTPTR),Y ;TO DESTINATION.       DEY            ;DECREMENT PAGE INDEX.       CPY #$FF       ;COPIED THE LAST BYTE?       BNE MOVEIT     ;IF NOT, HANDLE AS BEFORE.       JMP OKRTN      ;IF SO, RETURN BEARING                      ;'OKAY' CODE.;********************************************;;SET PAGE POINTERS TO BOTTOM OF;ORIGIN, DESTINATION BLOCKS.;;********************************************LOPAGE LDA SA       STA GETPTR       LDA SA+1       STA GETPTR+1       LDA DEST       STA PUTPTR       LDA DEST+1       STA PUTPTR+1;       RTS;********************************************;;LET USER SET DESTINATION ADDRESS;;********************************************SETDAT JSR TVTON   ;LET USER SET DESTINATION       JSR PRINTX       .BYTE TEX,CR,LF        .BYTE 'SET DESTINATION FREBOT'       .BYTE CR,LF       .BYTE ETX;       ;JSR VISMON    ;LET USER SET AN ADDRESS              LDA #<FREBOT  ;       STA SELECT    ;       LDA #>FREBOT  ;       STA SELECT+1  ;;       JSR DAHERE    ;;       RTS           ;RETURN.;********************************************;;LET USER SET DESTINATION ADDRESS;;********************************************SETDA  JMP SETDAT  ;TEST CODE       JSR TVTON   ;LET USER SET DESTINATION       JSR PRINTX       .BYTE TEX,CR,LF        .BYTE 'SET DESTINATION AND PRESS Q.'       .BYTE ETX;       JSR VISMON    ;LET USER SET AN ADDRESS;DAHERE LDA SELECT    ;       STA DEST      ;       LDA SELECT+1   ;       STA DEST+1     ;;       RTS           ;RETURN.;********************************************;;;;********************************************.END