;********************************************;TWO HEX DUMP TOOLS;;APPENDIX C5: ASSEMBLER LISTING OF;TWO HEXDUMP TOOLS;SEE CHAPTER 8 OF TOP-DOWN ASSEMBLY LANGUAGE;PROGRAMMING FOR YOUR COMMODORE 64 AND VIC-20;KEN SKIER;COPYRIGHT (C) 1984 BY KENNETH SKIER;LEXINGTON, MASSACHUSETTS;********************************************;;********************************************;;VARIABLES;;********************************************COUNTR .BYTE 0 ;THIS BYTE COUNTS THE NUMBER OF LINES               ;DUMPED BY TVDUMP.MASK   .BYTE 7 ;FOR OUTPUT A (SUITABLE FOR               ;C-64). USE ".BYTE 3" FOR               ;OUTPUT B (SUITABLE FOR               ;VIC-20).COLUMN .BYTE 0 ;THIS 1-BYTE VARIABLE IS USED TO COUNT               ;FROM 00 TO $0F.;********************************************;;TVDUMP;;********************************************TVDUMP =*       JSR TVTON   ;SELECT TVT AS OUTPUT DEVICE.                   ;       JSR HEADSN  ;OUTPUT HEXDUMP HEADER.                   ;          LDA #4      ;SET COUNTR TO NUMBER OF       STA COUNTR  ;LINES TO BE DUMPED.                   ;       LDA SELECT  ;SET SELECT TO BEGINNING OF       AND #$F0    ;A HEX LINE (16 BYTES) BY       STA SELECT  ;ZEROING 4 LSB IN SELECT.                   ;DUMPLN JSR PRADR   ;PRINT THE SELECTED ADDRESS.       JSR SPACEO   ;PPRINT A SPACE ON THE SCREEN.                   ;DMPBYT JSR SPACEO   ;PRINT A SPACE ON THE SCREEN.       JSR DUMPSL  ;DUMP SELECTED BYTE.       JSR INCSL   ;SELECT NEXT ADDRESS BY INCREMENTING                   ;SELECT NEXT BYTE.;       LDA SELECT  ;SELECT NEXT BYTE.       AND MASK    ;SELECT NEXT BYTE.                   ;0, FOR OUTPUT A, OR 2 LSB 0,                   ;FOR OUTPUT B?)                   ;       BNE DMPBYT  ;IF NOT, DUMP NEXT BYTE...       JSR CRLF    ;IF SO, ADVANCE TO A NEW LINE                   ;ON SCREEN.                   ;       LDA SELECT  ;DOES THIS ADDRESS MARK THE       AND #$0F    ;BEGINNING OF A NEW HEX LINE?                   ;(ARE 4 LSB 0?)                   ;       BNE IFDONE       JSR CRLF    ;IF SO, ADVANCE TO A NEW                   ;LINE ON SCREEN.                   ;IFDONE DEC COUNTR  ;DUMPED LAST LINE YET?       BNE DUMPLN  ;IF NOT, DUMP NEXT LINE.                   ;       JSR TVTOFF  ;DE-SELECT TVT AS OUTPUT                   ;DEVICE.       RTS         ;RETURN TO CALLER.;********************************************;;DUMP CURRENTLY SELECTED BYTE;;********************************************DUMPSL JSR GETSL   ;GET CURRENTLY SELECTED BYTE.       JSR PRBYT   ;PRINT IT IN HEXADECIMAL FORMAT.       RTS         ;RETURN TO CALLER.;********************************************;;PRINT ADDRESS;;********************************************PRADR  LDA SELECT+1 ;GET THE HIGH BYTE OF SELECT...       JSR PRBYT    ;...AND PRINT IT IN HEXADECIMAL FORMAT.       LDA SELECT   ;GET THE LOW BYTE OF SELECT...       JSR PRBYT    ;...AND PRINT IT IN HEXADECIMAL FORMAT.       RTS          ;THEN RETURN TO CALLER.;********************************************;;PRDUMP;;********************************************PRDUMP JSR TITLE   ;DISPLAY THE TITLE.       ;JSR SETADS  ;LET USER SET START ADDRESS AND END AD-                   ;DRESS OF MEMORY TO BE DUMPED.                   ;(SETADS RETURNS WITH SELECT=EA,                   ;THE END ADDRESS.)       JSR SETADT  ;TEST CODE                   ;       JSR GOTOSA  ;SET SELECT = SA, THE STARTING ADDRESS.       JSR PRON    ;SELECT PRINTER AS A OUTPUT DEVICE. (OTHER                   ;SELECTED DEVICES WILL ECHO THE DUMP.)       JSR HEADER  ;OUTPUT HEXDUMP HEADER.HELOOP JSR PRLINE  ;DUMP ONE LINE.       BPL HELOOP  ;DUMPED LAST LINE? IF NOT,                   ;DUMP NEXT LINE.                   ;       JSR CRLF    ;IF SO, GO TO A NEW LINE.                   ;       JSR PROFF   ;DE-SELECT PRINTER FOR OUTPUT.                   ;       RTS         ;RETURN TO CALLER.;********************************************;;PRINT THE HEXDUMP TITLE ON SCREEN;;********************************************TITLE  JSR TVTON   ;SELECT SCREEN FOR OUTPUT.       JSR PROFF   ;DE-SELECT PRINTER.       JSR PRINTX  ;OUTPUT THE FOLLOWING TEXTs       .BYTE TEX   ;TEXT STRING MUST START                   ;WITH A START OF TEXT CHAR.       .BYTE CR       .TEXT "PRINTING HEXDUMP"       .BYTE CR,LF,LF        .BYTE ETX    ;TEXT STRING MUST END WITH                    ;AN END OF TEXT CHARACTER.       RTS          ;RETURN TO CALLER.;********************************************;;SET STARTING ADDRESS, ENDING ADDRESS;TEST MODE;;********************************************SETADT JSR TVTON    ;SELECT TVT AS AN OUTPUT DEVICE. ALL                    ;OTHER SELECTED OUTPUT DEVICES WILL ECHO                    ;THE SCREEN OUTPUT.       JSR PRINTX   ;PUT PROMPT ON THE SCREEN:       .BYTE TEX    ;       .BYTE CR,LF,LF                ;       .TEXT "SET STARTING ADDRESS " ;       .TEXT "TO FRERAM"             ;       .BYTE CR,LF                   ;       .BYTE ETX                     ;       ;JSR VISMON   ;CALL THE VISIBLE MONITOR, SO USER CAN       ;             ;SPECIFY A GIVEN ADDRESS.       LDA #<FRERAM ;       STA SELECT   ;       LDA #>FRERAM ;       STA SELECT+1 ;                    ;       JSR SAHERE   ;SET STARTING ADDRESS EQUAL TO ADDRESS SET                    ;BY THE USER.       JSR PRINTX   ;PUT PROMPT ON THE SCREEN:       .BYTE TEX       .BYTE CR,LF,LF       .TEXT "SET ENDING ADDRESS "       .TEXT "FRETOP"        .BYTE CR,LF                   ;       .BYTE ETX       ;JSR VISMON   ;CALL THE VISIBLE MONITOR, SO USER CAN       ;             ;SPECIFY A GIVEN ADDRESS.       LDA #<FRETOP ;       STA SELECT   ;       LDA #>FRETOP ;       STA SELECT+1 ;                    ;       JSR EAHERE   ;                    ;       RTS          ;;********************************************;;LET USER SET STARTING ADDRESS AND;END ADDRESS OF A BLOCK OF MEMORY:;;********************************************SETADS JMP SETADT   ;TEST CODE       JSR TVTON    ;SELECT TVT AS AN OUTPUT DEVICE. ALL                    ;OTHER SELECTED OUTPUT DEVICES WILL ECHO                    ;THE SCREEN OUTPUT.       JSR PRINTX   ;PUT PROMPT ON THE SCREEN:       .BYTE TEX    ;       .BYTE CR,LF,LF                ;       .TEXT "SET STARTING ADDRESS " ;       .TEXT "AND PRESS Q"           ;       .BYTE ETX                     ;       JSR VISMON   ;CALL THE VISIBLE MONITOR, SO USER CAN                    ;SPECIFY A GIVEN ADDRESS.       JSR SAHERE   ;SET STARTING ADDRESS EQUAL TO ADDRESS SET                    ;BY THE USER.SETEA  JSR PRINTX   ;PUT PROMPT ON THE SCREEN:       .BYTE TEX       .BYTE CR,LF,LF       .TEXT "SET ENDING ADDRESS "       .TEXT "AND PRESS Q"        .BYTE ETX       JSR VISMON   ;CALL THE VISIBLE MONITOR, SO USER CAN                    ;SPECIFY A GIVEN ADDRESS.       SEC          ;IF USER TRIED TO SET AN       LDA SELECT+1 ;ENDING ADDRESS LESS THAN       CMP SA+1     ;THE STARTING ADDRESS,       BCC TOOLOW   ;MAKE USER DO IT OVER.       BNE EAHERE   ;IF SELECT IS GREATER THAN SA, SET                    ;EA=SELECT. THAT WILL MAKE EA                    ;GREATER THAN SA.       LDA SELECT   ;       CMP SA       ;       BCC TOOLOW   ;EAHERE LDA SELECT+1 ;SET EA=SELECT.       STA EA+1     ;       LDA SELECT   ;       STA EA       ;       RTS          ;... AND RETURN.SAHERE LDA SELECT+1 ;SET SA=SELECT.       STA SA+1     ;;       LDA SELECT       STA SA       RTS           ;...AND RETURN.TOOLOW JSR PRINTX    ;SINCE USER SET ENDING ADDRESS       .BYTE TEX     ;TOO LOW, PRINT ERROR MESSAGE:       .BYTE CR,LF,CR       .TEXT "ERROR! "       .TEXT "END ADDRESS LESS "       .TEXT "THAN START ADDRESS, "       .TEXT "WHICH IS "       .BYTE ETX       JSR PRSA     ;PRINT STARTING ADDRESS. ...AND LET THE USER                    ;SET       JMP SETEA    ;THE ENDING ADDRESS AGAIN.;********************************************;;PRINT START ADDRESS;;********************************************PRSA  LDA #"$"     ;PRINT A DOLLAR SIGN TO      JSR PRCHR    ;INDICATE HEXADECIMAL.      LDA SA+1     ;PRINT HIGH BYTE OF STARTING ADDRESS.      JSR PRBYT      LDA SA       ;PRINT LOW BYTE OF STARTING ADDRESS.      JSR PRBYT      RTS          ;RETURN TO CALLER.;********************************************;;PPRINT END ADDRESS;;********************************************PREA  LDA #"$"     ;PRINT A DOLLAR SIGN TO      JSR PRCHR    ;INDICATE HEXADECIMAL.      LDA EA+1     ;PRINT HIGH BYTE OF ENDING ADDRESS.      JSR PRBYT      LDA EA       ;PRINT LOW BYTE OF ENDING ADDRESS.      JSR PRBYT      RTS          ;RETURN TO CALLER.;********************************************;;PRINT RANGE OF ADDRESSES;;********************************************RANGE JSR PRSA     ;PRINT STARTING ADDRESS.      LDA #$2D     ;"—" PRINT A HYPHEN.      JSR PRCHR      JSR PREA     ;PRINT ENDING ADDRESS.      RTS          ;RETURN TO CALLER.;********************************************;;PRINT HEADER;;********************************************HEADER JSR PRINTX       .BYTE TEX       .BYTE CR,LF,LF       .TEXT "DUMPING "       .BYTE CR,LF,LF       .BYTE ETX;       JSR RANGE       JSR CRLF;       JSR PRINTX       .BYTE TEX,LF,LF       .TEXT "ADDR   0  1  2  3  4  5  6  7  "       .TEXT "8  9  A  B  C  D  E  F"       .BYTE CR,LF       .BYTE ETX;       RTS;********************************************;;PRINT RANGE OF ADDRESSES;;********************************************EADD .WORD $0000RANGS LDA SELECT      STA SA      LDA SELECT+1      STA SA+1;      JSR PRSA     ;PRINT STARTING ADDRESS.;      LDA #$2D     ;"—" PRINT A HYPHEN.      JSR PRCHR;      LDA SELECT      STA EA      LDA SELECT+1      STA EA+1;      CLC      LDA EA      ADC #$1F      STA EA      BCC E0      LDA EA+1      ADC #$00      STA EA+1;E0    JSR PREA     ;PRINT ENDING ADDRESS.      RTS          ;RETURN TO CALLER.;********************************************;;PRINT HEADER;;********************************************HEADSN JSR PRINTX       .BYTE TEX       .BYTE CR,LF,LF       .TEXT "DUMPING "       .BYTE CR,LF,LF       .BYTE ETX;       JSR RANGS       JSR CRLF;       JSR PRINTX       .BYTE TEX       .BYTE CR,LF,LF       .TEXT "ADDR   0  1  2  3  4  5  6  7  "       .BYTE CR,LF,LF       .BYTE ETX;       RTS;********************************************;;PRLINE;;********************************************PRLINE JSR CRLF           LDA SELECT  ;DETERMINE STARTING COLUMN       PHA         ;FOR THIS DUMP.       AND #$0F    ;       STA COLUMN  ;NOW COLUMN HOLDS NUMBER OF                   ;HEX COLUMN IN WHICH WE DUMP                   ;THE FIRST BYTE.       PLA         ;SET SELECT TO BEGINNING OF       AND #$F0    ;A HEX LINE.       STA SELECT  ;       JSR PRADR   ;PPRINT LINE'S START ADDRESS.       LDX #3      ;SPACE 3 IIMES—TO THE       JSR SPACES  ;FIRST HEX COLUMN.                   ;       LDA COLUMN  ;DO WE DUMP FROM THE FIRST                   ;HEX COLUMN?       BEQ COLOK   ;IF SO, WERE AT THE CORRECT                   ;COLUMN NOW.                   ;LOOPP  LDX #3      ;IF NOT, SPACE 3 TIMES FOR       JSR SPACES  ;EACH BYTE NOT DUMPED.       JSR INCSL   ;       DEC COLUMN  ;       BNE LOOPP   ;                   ;COLOK  JSR DUMPSL  ;DUMP SELECTED BYTE.       JSR SPACEO   ;SPACE ONCE.       JSR NEXTSL  ;SELECT NEXT BYTE                   ;       BMI EXITP   ;MINUS MEANS WE'VE DUMPED                   ;THROUGH TO THE END ADDRESS.                   ;NOTEA  LDA SELECT  ;DUMPED ENTIRE LINE?       AND#$0F     ;(ARE 4 LSB OF SELECT 0?)       CMP #0      ;IF SO, WE'VE DUMPED THE                   ;ENTIRE LINE. IF NOT,       BNE COLOK   ;SELECT NEXT BYTE AND DUMP IT.EXITP  RTS         ;RETURN MINUS IF EA DUMPED...                   ;OR PLUS IF EA NOT DUMPED.;********************************************;;SELECT NEXT BYTE (IF < END ADDRESS);;********************************************NEXTSL SEC          ;       LDA SELECT+1 ;HIGH BYTE OF SELECT LESS       CMP EA+1     ;THAN HIBH BYTE OF EA?       BCC SLOK     ;IF SO, SELECT<END ADDRESS.       BNE NOINC    ;IF SELECT>EA, DON'T                    ;INCREMENT SELECT.                    ;       SEC          ;SELECT IS IN SAME PAGE AS EA.       LDA SELECT   ;        CMP EA       ;        BCS NOINC    ;                    ;SLOK   JSR INCSL    ;SINCE SELECT NOT GREATER THAN                    ;EA, WE MAY INCREMENT SELECT.                    ;       LDA #0       ;SET "INCREMENTED" RETURN       RTS          ;CODE AND RETURN.                    ;NOINC  LDA #$FF     ;SET "NO INCREMENT" RETURN       RTS          ;CODE AND RETURN.;********************************************;;GO TO START OF BLOCK;;********************************************GOTOSA LDA SA       ;SET SELECT EQUAL TO SA.       STA SELECT   ;       LDA SA+1     ;       STA SELECT+1 ;       RTS          ;AND RETURN.;********************************************;;;;********************************************.END