;********************************************;PRINT UTILITIES;;APPENDIX C4: ASSEMBLER LISTING OF;PRINT UTILITIES;SEE CHAPTER 7 OF TOP-DOWN ASSEMBLY-LANGUAGE;PROGRAMMING FOR YOUR COMMODORE 64 AND VIC-20;BY KEN SKIER;COPYRIGHT <C> 1984 BY KENNETH SKIER;LEXINGTON, MASSACHUSETTS;********************************************;CHARS  SEND THE CHARACTER IN THE ACCUMULATOR "X" TIMES TO ALL CURRENT-;       LY SELECTED OUTPUT DEVICES.;CRLF  CAUSE A NEW LINE ON ALL CURRENTLY SELECTED DEVICES.;CRLFS CAUSE ''X" NEW LINES ON ALL CURRENTLY SELECTED DEVICES.;PRBYT PRINT THE BYTE IN THE ACCUMULATOR, IN HEXADECIMAL REPRESENTA;       TION.;PRCHR PRINT THE CHARACTER IN THE ACCUMULATOR ON ALL CURRENTLY SELECTED;       DEVICES.;PRMSG PRINT THE MESSAGE POINTED TO BY A ZERO-PAGE POINTER SPECIFIED;       BY X.;PRINTX PRINT THE MESSAGE FOLLOWING THE CALL TO "PRINTX".;SPACEO SEND A SPACE TO ALL CURRENTLY SELECTED OUTPUT DEVICES.;SPACES SEND "X" SPACES TO ALL CURRENTLY SELECTED OUTPUT DEVICES.;********************************************;;DEVICE FLAGS;;********************************************OFF = 0          ;WHEN A DEVICE FLAG = ZERO, THAT DEVICE                 ;IS NOT SELECTED.ON = $FF         ;WHEN A DEVICE FLAG = $FF, THAT DEVICE IS                 ;SELECTED.TVT .BYTE ON     ;THIS FLAG IS ZERO IF TVT IS NOT SELECTED;                 ;NONZERO OTHERWISE. INITIALLY, THE TVT IS                 ;SELECTED.PRINTR .BYTE OFF ;THIS FLAG IS ZERO IF THE PRINTR IS NOT                 ;SELECTED; NONZERO OTHERWISE. INITIALLY,                 ;THE PRINTER IS NOT SELECTED.USER   .BYTE OFF ;THIS FLAG IS ZERO IF THE USER-PROVIDED                 ;OUTPUT SUBROUTINE IS NOT SELECTED;                 ;NONZERO OTHERWISE. INITIALLY, THE USERPROVIDED                 ;FUNCTION IS DESELECTED.CHAR   .BYTE 0   ;THIS BYTE HOLDS THE LAST CHARACTER PASSED                 ;TO PRCHR.REPEAT .BYTE 0   ;THIS BYTE IS USED AS A REPEAT COUNTER BY                 ;SPACES, CHARS, AND CRLFS.TEMPX  .BYTE 0    ;THIS DATA CELL IS USED TO PRESERVE THE INI-                 ;TIAL VALUE OF X.RETURN .WORD 0   ;THIS POINTER IS USED BY PUSHSL AND                 ;POPSL TO PRESERVE THEIR RETURN AD-                 ;DRESSES.;********************************************;;SELECT AND DESELECT SUBROUTINES;;********************************************TVTON  LDA #ON    ;SELECT TVT AS AN OUTPUT DEVICE       STA TVT    ;BY SETTING THE FLAG THAT INDICATES       RTS        ;THE "SELECT" STATE OF THE TVT.TVTOFF LDA #OFF   ;DESELECT TVT AS AN OUTPUT DEVICE       STA TVT    ;BY CLEARING THE FLAG THAT INDICATES       RTS        ;THE "SELECT" STATE OF THE TVT.PRON   LDA #ON    ;SELECT PRINTER AS AN OUTPUT DEVICE       STA PRINTR ;BY SETTING THE FLAG THAT INDICATES       RTS        ;THE "SELECT" STATE OF THE PRINTER.PROFF  LDA #OFF   ;DESELECT PRINTER AS AN OUTPUT DEVICE       STA PRINTR ;BY CLEARING THE FLAG THAT INDICATES       RTS        ;THE "SELECT" STATE OF THE PRINTER.USRON  LDA #ON    ;SELECT USER-WRITTEN SUBROUTINE AS AN       STA USER   ;OUTPUT DEVICE BY SETTING THE FLAG THAT       RTS        ;INDICATES THE "SELECT" STATE OF THE OUTPUT                  ;ROUTINE PROVIDED BY THE USER.USROFF LDA #OFF   ;DESELECT USER-WRITTEN SUBROUTINE       STA USER   ;AS AN OUTPUT DEVICE BY CLEARING THE FLAG       RTS        ;STATE OF THE OUTPUT ROUTINE PROVIDED BY                  ;THE USERALLON  JSR TVTON  ;SELECT ALL OUTPUT DEVICES BY SELECTING       JSR PRON   ;EACH OUTPUT DEVICE INDIVIDUALLY.       JSR USRON  ;       RTS        ;ALLOFF JSR TVTOFF ;DESELECT ALL OUTPUT DEVICES BY       JSR PROFF  ;DESELECTING EACH OUTPUT DEVICE       JSR USROFF ;INDIVIDUALLY.       RTS        ;;********************************************;;PRCHR;;********************************************PRCHR  CMP #0      ;TEST CHARACTER       BEQ EXIT4   ;IF IT'S A NULL, RETURN WITHOUT PRINTING IT.                   ;       STA CHAR    ;SAVE THE CHARACTER.                   ;       LDA TVT     ;IS TVT SELECTED?       BEQ IFPR    ;IF NOT, TEST NEXT DEVICE.                   ;       LDA CHAR    ;IF SO, SEND CHARACTER INDIRECTLY TO       JSR SENDL   ;SYSTEM'S TVT OUTPUT ROUTINE.                   ;IFPR   LDA PRINTR  ;IS PRINTER SELECTED?       BEQ IFUSR   ;IF NOT, TEST NEXT DEVICE.                   ;       LDA CHAR    ;IF SO, SEND CHARACTER INDIRECTLY       JSR SEND2   ;TO SYSTEM'S PRINTER DRIVER.                   ;IFUSR  LDA USER    ;IS USER-WRITTEN OUTPUT SUBROUTINE                   ;SELECTED?        BEQ EXIT4  ;IF NOT, TEST NEXT DEVICE.                   ;        LDA CHAR   ;IF SO, SEND CHARACTER INDIRECTLY        JSR SEND3  ;TO USER-WRITTEN OUTPUT SUBROUTINE.                   ;EXIT4   RTS        ;RETURN TO CALLER.;********************************************;;VECTORED SUBROUTINE CALLS;;********************************************SENDL JMP (ROMTVT)SEND2 JMP (ROMPRT)SEND3 JMP (USROUT);********************************************;;PRINT A CARRIAGE RETURN-LINE FEED;;********************************************;CR = $0D ;ASCII CARRIAGE RETURN CHARACTER.;LF = $0A ;ASCII LINE FEED CHARACTER.;CRLF  LDA #CR     ;SEND A CARRIAGE RETURN AND A      JSR PRCHR  ;LINE FEED TO THE CURRENTLY SELECTED      LDA #LF     ;DEVICE(S).      JSR PRCHR  ;      RTS         ;RETURN.;********************************************;;PRINT A SPACE;;********************************************SPACEO LDA #$20    ;LOAD ACCUMULATOR WITH ASCII SPACE.       JSR PRCHR  ;PRINT IT TO ALL CURRENTLY SELECTED OUTPUT                   ;DEVICES.       RTS         ;RETURN.;********************************************;;PRINT A BYTE;;********************************************PRBYT  PHA         ;SAVE BYTE.       LSR A       ;DETERMINE ASCII FOR THE 4 MSB (MOST-                   ;SIGNIFICANT BITS) IN THE       LSR A       ;BYTE:       LSR A       ;       LSR A       ;       JSR ASCII   ;       JSR PRCHR  ;PRINT THAT ASCII CHARACTER TO THE CURRENT                   ;DEVICE(S).       PLA         ;DETERMINE ASCII FOR THE 4 LSB (LEAST-                   ;SIGNIFICANT BITS) IN THE       JSR ASCII   ;BYTE THAT WAS PASSED TO THIS SUBROUTINE.       JSR PRCHR  ;PRINT THAT ASCII CHARACTER TO THE CURRENT                   ;DEVICE(S).       RTS         ;RETURN TO CALLER.;********************************************;;PRINT X SPACES.INT X CHARACTERS;;********************************************SPACES LDA #$20    ;LOAD ACCUMULATOR WITH ASCII SPACE.CHARS  STX REPEAT  ;INITIALIZE THE REPEAT COUNTER.RPLOOP PHA         ;SAVE CHARACTER TO BE REPEATED.       LDX REPEAT  ;HAS REPEAT COUNTER TIMED OUT YET?       BEQ RPTEND  ;IF SO, EXIT. IF NOT,       DEC REPEAT  ;DECREMENT REPEAT COUNTER.       JSR PRCHR  ;PRINT CHARACTER TO ALL CURRENTLY SELECTED                   ;OUTPUT DEVICES.       PLA       CLC         ;LOOP BACK TO REPEAT       BCC RPLOOP  ;CHARACTER, IF NECESSARY.RPTEND PLA         ;CLEAN UP STACK.       RTS         ;RETURN TO CALLER.;********************************************;;PRINT X NEWLINES;;********************************************CRLFS  STX REPEAT  ;INITIALIZE REPEAT COUNTER.CRLOOP LDX REPEAT  ;EXIT IF REPEAT COUNTER HAS TIMED OUT.       BEQ ENDCR  ;       DEC REPEAT  ;DECREMENT REPEAT COUNTER.       JSR CRLF   ;PRINT A CARRIAGE RETURN AND LINE FEED.       CLC         ;LOOP BACK TO SEE IF DONE YET.       BCC CRLOOP  ;ENDCR RTS         ;IF DONE, RETURN TO CALLER.;********************************************;;PRINT A MESSAGE;;********************************************PRMSG STX TEMPX    ;SAVE X REGISTER, WHICH SPECIFIES MESSAGE                   ;POINTER.       LDA 1,X     ;SAVE MESSAGE POINTER.       PHA         ;       LDA 0,X     ;       PHA         ;LOOP4  LDX TEMPX  ;RESTORE ORIGINAL VALUE OF X, SO IT POINTS                   ;TO MESSAGE POINTER.       LDA (0,X)   ;GET NEXT CHARACTER FROM MESSAGE.       CMP #ETX    ;IS IT THE END OF MESSAGE INDICATOR?       BEQ MSGEND  ;IF SO, HANDLE THE END OF THE MESSAGE...       INC 0,X     ;IF NOT, INCREMENT THE MESSAGE POINTER       BNE NEXT4   ;SO IT POINTS TO THE NEXT       INC 1,X     ;CHARACTER IN THE MESSAGE.NEXT4  JSR PRCHR  ;SEND THE CHARACTER TO ALL CURRENTLY                   ;SELECTED OUTPUT DEVICES.       CLC         ;GET NEXT CHARACTER       BCC LOOP4   ;FROM MESSAGE.MSGEND PLA         ;RESTORE MESSAGE POINTER.       STA 0,X     ;       PLA         ;       STA 1,X     ;       RTS         ;RETURN TO CALLER, WITH MSGPTR PRE-                   ;SERVED.;********************************************;;;;********************************************PRINTX PLA          ;PULL RETURN ADDRESS FROM       TAX          ;STACK AND SAVE IT IN X AND       PLA          ;REGISTERS X AND Y.       TAY          ;Y REGISTERS.;       JSR PUSHSL   ;SAVE THE SELECT POINTER.       STX SELECT   ;SET SELECT EQUAL TO       STY SELECT+1 ;RETURN ADDRESS.;       JSR INCSL    ;INCREMENT SELECT POINTER SO IT POINTS                    ;TO TEX CHARACTER.;NEXTCH JSR INCSL    ;INCREMENT SELECT POINTER SO IT POINTS TO                    ;THE NEXT CHARACTER IN THE MESSAGE.       JSR GETSL    ;GET CHARACTER.       CMP #ETX     ;IS IT END OF MESSAGE INDICATOR?       BEQ ENDIT    ;IF SO, ADJUST RETURN ADDRESS AND RETURN.       JSR PRCHR    ;IF NOT, PRINT CHARACTER.       CLC          ;LOOP BACK FOR NEXT       BCC NEXTCH   ;CHARACTER...;ENDIT  LDX SELECT   ;       LDY SELECT+1 ;;       JSR POPSL    ;RESTORE SELECT POINTER TO ITS ORIGINAL                    ;VALUE.       TYA          ;PUSH ADDRESS       PHA          ;OF ETX       TXA          ;ONTO THE STACK.       PHA       RTS          ;RETURN (TO BYTE IMMEDIATELY FOLLOWING                    ;ETX).;********************************************;;SAVE SELECT POINTER;(PRESERVING X,Y, AND THE ZERO PAGE);;********************************************PUSHSL PLA          ;PULL RETURN ADDRESS FROM STACK AND       STA RETURN   ;STORE IT TEMPORARILY IN RETURN.       PLA          ;       STA RETURN+1 ;                    ;       LDA SELECT+1 ;PUSH SELECT POINTER ONTO STACK.       PHA          ;       LDA SELECT   ;       PHA          ;                    ;       LDA RETURN+1 ;PUSH RETURN ADDRESS BACK ONTO STACK.       PHA          ;       LDA RETURN   ;       PHA          ;                    ;       RTS          ;RETURN TO CALLER. (CALLER WILL FIND SELECT                    ;POINTER ON TOP OF THE STACK.);********************************************;;RESTORE SELECT POINTER;(PRESERVING X,Y, AND THE ZERO PAGE);;********************************************POPSL  PLA          ;SAVE RETURN ADDRESS TEMPORARILY.       STA RETURN   ;       PLA          ;       STA RETURN+1 ;                    ;       PLA          ;RESTORE SELECT POINTER FROM STACK.       STA SELECT   ;       PLA          ;       STA SELECT+1 ;                    ;       LDA RETURN+1 ;PLACE RETURN ADDRESS BACK ON STACK.       PHA          ;       LDA RETURN   ;       PHA          ;                    ;       RTS          ;RETURN TO CALLER.;********************************************;;;;********************************************.END